/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module DebugProtoTest_types;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

enum SomeEnum {
  ONE = 1,
  TWO = 2
}

alias int[int] SomeMap;

struct Doubles {
  double nan;
  double inf;
  double neginf;
  double repeating;
  double big;
  double small;
  double zero;
  double negzero;
  
  mixin TStructHelpers!([
    TFieldMeta(`nan`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`inf`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`neginf`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`repeating`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`big`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`small`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`zero`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`negzero`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct OneOfEach {
  bool im_true;
  bool im_false;
  byte a_bite;
  short integer16;
  int integer32;
  long integer64;
  double double_precision;
  string some_characters;
  string zomg_unicode;
  bool what_who;
  string base64;
  byte[] byte_list;
  short[] i16_list;
  long[] i64_list;
  
  mixin TStructHelpers!([
    TFieldMeta(`im_true`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`im_false`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_bite`, 3, TReq.OPT_IN_REQ_OUT, q{cast(byte)127}),
    TFieldMeta(`integer16`, 4, TReq.OPT_IN_REQ_OUT, q{cast(short)32767}),
    TFieldMeta(`integer32`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`integer64`, 6, TReq.OPT_IN_REQ_OUT, q{10000000000L}),
    TFieldMeta(`double_precision`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`some_characters`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`zomg_unicode`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`what_who`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`base64`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_list`, 12, TReq.OPT_IN_REQ_OUT, q{{
      byte[] v;
      v ~= cast(byte)1;
      v ~= cast(byte)2;
      v ~= cast(byte)3;
      return v;
    }()}),
    TFieldMeta(`i16_list`, 13, TReq.OPT_IN_REQ_OUT, q{{
      short[] v;
      v ~= cast(short)1;
      v ~= cast(short)2;
      v ~= cast(short)3;
      return v;
    }()}),
    TFieldMeta(`i64_list`, 14, TReq.OPT_IN_REQ_OUT, q{{
      long[] v;
      v ~= 1L;
      v ~= 2L;
      v ~= 3L;
      return v;
    }()})
  ]);
}

struct Bonk {
  int type;
  string message;
  
  mixin TStructHelpers!([
    TFieldMeta(`type`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Nesting {
  Bonk my_bonk;
  OneOfEach my_ooe;
  
  mixin TStructHelpers!([
    TFieldMeta(`my_bonk`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`my_ooe`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct HolyMoley {
  OneOfEach[] big;
  HashSet!(string[]) contain;
  Bonk[][string] bonks;
  
  mixin TStructHelpers!([
    TFieldMeta(`big`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contain`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bonks`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Backwards {
  int first_tag2;
  int second_tag1;
  
  mixin TStructHelpers!([
    TFieldMeta(`first_tag2`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`second_tag1`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Empty {
  mixin TStructHelpers!();
}

struct Wrapper {
  Empty foo;
  
  mixin TStructHelpers!([
    TFieldMeta(`foo`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct RandomStuff {
  int a;
  int b;
  int c;
  int d;
  int[] myintlist;
  Wrapper[int] maps;
  long bigint;
  double triple;
  
  mixin TStructHelpers!([
    TFieldMeta(`a`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`c`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`d`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`myintlist`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`maps`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bigint`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`triple`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Base64 {
  int a;
  string b1;
  string b2;
  string b3;
  string b4;
  string b5;
  string b6;
  
  mixin TStructHelpers!([
    TFieldMeta(`a`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b1`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b2`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b3`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b4`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b5`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b6`, 7, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CompactProtoTestStruct {
  byte a_byte;
  short a_i16;
  int a_i32;
  long a_i64;
  double a_double;
  string a_string;
  string a_binary;
  bool true_field;
  bool false_field;
  Empty empty_struct_field;
  byte[] byte_list;
  short[] i16_list;
  int[] i32_list;
  long[] i64_list;
  double[] double_list;
  string[] string_list;
  string[] binary_list;
  bool[] boolean_list;
  Empty[] struct_list;
  HashSet!(byte) byte_set;
  HashSet!(short) i16_set;
  HashSet!(int) i32_set;
  HashSet!(long) i64_set;
  HashSet!(double) double_set;
  HashSet!(string) string_set;
  HashSet!(string) binary_set;
  HashSet!(bool) boolean_set;
  HashSet!(Empty) struct_set;
  byte[byte] byte_byte_map;
  byte[short] i16_byte_map;
  byte[int] i32_byte_map;
  byte[long] i64_byte_map;
  byte[double] double_byte_map;
  byte[string] string_byte_map;
  byte[string] binary_byte_map;
  byte[bool] boolean_byte_map;
  short[byte] byte_i16_map;
  int[byte] byte_i32_map;
  long[byte] byte_i64_map;
  double[byte] byte_double_map;
  string[byte] byte_string_map;
  string[byte] byte_binary_map;
  bool[byte] byte_boolean_map;
  byte[immutable(byte[])] list_byte_map;
  byte[immutable(HashSet!(byte))] set_byte_map;
  byte[immutable(byte[byte])] map_byte_map;
  byte[byte][byte] byte_map_map;
  HashSet!(byte)[byte] byte_set_map;
  byte[][byte] byte_list_map;
  
  mixin TStructHelpers!([
    TFieldMeta(`a_byte`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_i16`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_i32`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_i64`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_double`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_string`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`a_binary`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`true_field`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`false_field`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`empty_struct_field`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_list`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i16_list`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_list`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i64_list`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`double_list`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`string_list`, 16, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`binary_list`, 17, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`boolean_list`, 18, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_list`, 19, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_set`, 20, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i16_set`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_set`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i64_set`, 23, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`double_set`, 24, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`string_set`, 25, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`binary_set`, 26, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`boolean_set`, 27, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_set`, 28, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_byte_map`, 29, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i16_byte_map`, 30, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_byte_map`, 31, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i64_byte_map`, 32, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`double_byte_map`, 33, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`string_byte_map`, 34, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`binary_byte_map`, 35, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`boolean_byte_map`, 36, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_i16_map`, 37, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_i32_map`, 38, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_i64_map`, 39, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_double_map`, 40, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_string_map`, 41, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_binary_map`, 42, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_boolean_map`, 43, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`list_byte_map`, 44, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`set_byte_map`, 45, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`map_byte_map`, 46, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_map_map`, 47, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_set_map`, 48, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`byte_list_map`, 49, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SingleMapTestStruct {
  int[int] i32_map;
  
  mixin TStructHelpers!([
    TFieldMeta(`i32_map`, 1, TReq.REQUIRED)
  ]);
}

class ExceptionWithAMap : TException {
  string blah;
  string[string] map_field;
  
  mixin TStructHelpers!([
    TFieldMeta(`blah`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`map_field`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BlowUp {
  HashSet!(string[int])[immutable(int[])] b1;
  HashSet!(string[int])[immutable(int[])] b2;
  HashSet!(string[int])[immutable(int[])] b3;
  HashSet!(string[int])[immutable(int[])] b4;
  
  mixin TStructHelpers!([
    TFieldMeta(`b1`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b2`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b3`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`b4`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ReverseOrderStruct {
  string first;
  short second;
  int third;
  long fourth;
  
  mixin TStructHelpers!([
    TFieldMeta(`first`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`second`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`third`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`fourth`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct StructWithSomeEnum {
  SomeEnum blah;
  
  mixin TStructHelpers!([
    TFieldMeta(`blah`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TestUnion {
  string string_field;
  int i32_field;
  OneOfEach struct_field;
  RandomStuff[] struct_list;
  int other_i32_field;
  SomeEnum enum_field;
  HashSet!(int) i32_set;
  int[int] i32_map;
  
  mixin TStructHelpers!([
    TFieldMeta(`string_field`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_field`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_field`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_list`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`other_i32_field`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`enum_field`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_set`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_map`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TestUnionMinusStringField {
  int i32_field;
  OneOfEach struct_field;
  RandomStuff[] struct_list;
  int other_i32_field;
  SomeEnum enum_field;
  HashSet!(int) i32_set;
  int[int] i32_map;
  
  mixin TStructHelpers!([
    TFieldMeta(`i32_field`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_field`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`struct_list`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`other_i32_field`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`enum_field`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_set`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`i32_map`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ComparableUnion {
  string string_field;
  string binary_field;
  
  mixin TStructHelpers!([
    TFieldMeta(`string_field`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`binary_field`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct StructWithAUnion {
  TestUnion test_union;
  
  mixin TStructHelpers!([
    TFieldMeta(`test_union`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct PrimitiveThenStruct {
  int blah;
  int blah2;
  Backwards bw;
  
  mixin TStructHelpers!([
    TFieldMeta(`blah`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`blah2`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bw`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct StructWithASomemap {
  SomeMap somemap_field;
  
  mixin TStructHelpers!([
    TFieldMeta(`somemap_field`, 1, TReq.REQUIRED)
  ]);
}

struct BigFieldIdStruct {
  string field1;
  string field2;
  
  mixin TStructHelpers!([
    TFieldMeta(`field1`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`field2`, 45, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BreaksRubyCompactProtocol {
  string field1;
  BigFieldIdStruct field2;
  int field3;
  
  mixin TStructHelpers!([
    TFieldMeta(`field1`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`field2`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`field3`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TupleProtocolTestStruct {
  int field1;
  int field2;
  int field3;
  int field4;
  int field5;
  int field6;
  int field7;
  int field8;
  int field9;
  int field10;
  int field11;
  int field12;
  
  mixin TStructHelpers!([
    TFieldMeta(`field1`, -1, TReq.OPTIONAL),
    TFieldMeta(`field2`, -2, TReq.OPTIONAL),
    TFieldMeta(`field3`, -3, TReq.OPTIONAL),
    TFieldMeta(`field4`, -4, TReq.OPTIONAL),
    TFieldMeta(`field5`, -5, TReq.OPTIONAL),
    TFieldMeta(`field6`, -6, TReq.OPTIONAL),
    TFieldMeta(`field7`, -7, TReq.OPTIONAL),
    TFieldMeta(`field8`, -8, TReq.OPTIONAL),
    TFieldMeta(`field9`, -9, TReq.OPTIONAL),
    TFieldMeta(`field10`, -10, TReq.OPTIONAL),
    TFieldMeta(`field11`, -11, TReq.OPTIONAL),
    TFieldMeta(`field12`, -12, TReq.OPTIONAL)
  ]);
}

